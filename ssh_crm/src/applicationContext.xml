<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.springframework.org/schema/beans" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd ">
	
	<!-- 配置注解扫描 
		全局配置  按包扫描
	-->
	<!-- <context:component-scan base-package="caotinging.*"></context:component-scan> -->
	
	<!-- 配置注解有效类型
		只给在xml中配置了的bean注入属性，对于xml中没有注册的bean不进行操作
	 -->
	<context:annotation-config></context:annotation-config>
	
	<!-- 配置c3p0连接池 -->
	<context:property-placeholder location="classpath:c3p0Conf.properties"/>
	
	<bean name="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driverClass}"></property>
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
		<property name="user" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>
	
	<!-- hibernate和spring整合方案一：仍然使用之前的配置文件
	<bean name="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="configLocation" value="classpath:hibernate.cfg.xml"></property>
	</bean>
	-->
	
	<!-- hibernate和spring整合方案二：在spring中配置hibernate  -->
	<bean name="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<!-- 注入c3p0属性 -->
		<property name="dataSource" ref="dataSource"></property>
	
		<!-- 配置hibernate基本信息 -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.connection.driver_class">com.mysql.jdbc.Driver</prop>
				<prop key="hibernate.connection.username">root</prop>
				<prop key="hibernate.connection.password">980515</prop>
				<prop key="hibernate.connection.url">jdbc:mysql:///ssh_crm</prop>
				
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.show_sql">false</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
		
		<!-- 引入orm元数据，指定orm元数据读取路径，spring自动读取包中所有配置信息 -->
		<property name="mappingDirectoryLocations" value="classpath:caotinging/domain"></property>
	</bean>
	
	<!-- 配置核心事务管理器 -->
	<bean name="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	
	<!-- 配置通知 -->
	<tx:advice transaction-manager="transactionManager" id="txAdvice">
		<tx:attributes>
			<tx:method name="get*" read-only="true" propagation="REQUIRED" isolation="REPEATABLE_READ"/>
			<tx:method name="find*" read-only="true" propagation="REQUIRED" isolation="REPEATABLE_READ"/>
			<tx:method name="save*" read-only="false" propagation="REQUIRED"/>
			<tx:method name="delete*" read-only="false" propagation="REQUIRED"/>
			<tx:method name="update*" read-only="false" propagation="REQUIRED"/>
			<tx:method name="remove*" read-only="false" propagation="REQUIRED"/>
			<tx:method name="add*" read-only="false" propagation="REQUIRED"/>
			<tx:method name="modify*" read-only="false" propagation="REQUIRED"/>
			<tx:method name="load*" read-only="false" propagation="REQUIRED"/>
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- 进行织入 -->
	<aop:config>
		<aop:pointcut expression="execution(* caotinging.service.impl.*ServiceImpl.*(..))" id="servicePc"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="servicePc"/>
	</aop:config>
	
	<!-- 配置Action以及其service依赖
		Action的scope属性必须为prototype（多例）
	 -->
	<bean name="saleVisitAction" class="caotinging.web.action.SaleVisitAction" scope="prototype"></bean>
	<bean name="linkManAction" class="caotinging.web.action.LinkManAction" scope="prototype"></bean>
	<bean name="baseDictAction" class="caotinging.web.action.BaseDictAction" scope="prototype"></bean>
	<bean name="userAction" class="caotinging.web.action.UserAction" scope="prototype">
		<property name="userService" ref="userService"></property>
	</bean>
	<bean name="customerAction" class="caotinging.web.action.CustomerAction" scope="prototype"></bean>
	
	<!-- 配置service以及其依赖 -->
	<bean name="saleVisitService" class="caotinging.service.impl.SaleVisitServiceImpl"></bean>
	<bean name="linkManService" class="caotinging.service.impl.LinkManServiceImpl"></bean>
	<bean name="baseDictService" class="caotinging.service.impl.BaseDictServiceImpl"></bean>
	<bean name="userService" class="caotinging.service.impl.UserServiceImpl">
		<property name="userDao" ref="userDao"></property>
	</bean>
	<bean name="customerService" class="caotinging.service.impl.CustomerServiceImpl"></bean>
	
	<!-- 配置dao以及其依赖 -->
	<bean name="saleVisitDao" class="caotinging.dao.impl.SaleVisitDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<bean name="linkManDao" class="caotinging.dao.impl.LinkManDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<bean name="baseDictDao" class="caotinging.dao.impl.BaseDictDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<bean name="userDao" class="caotinging.dao.impl.UserDaoImpl">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<bean name="customerDao" class="caotinging.dao.impl.CustomerDaoImpl">
		<!-- 这一步千万不要忘记，往dao继承的hibernateDaoSupport注入sessionFactory属性 -->
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
</beans>